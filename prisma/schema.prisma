// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String? 
  lastName      String? 
  username      String?   @unique 
  email         String    @unique
  password      String? 
  provider      String? 
  providerId    String? 
  emailVerified DateTime?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  accounts Account[]
  sessions Session[]

  posts        Post[]   @relation("PostAuthor")
  lists        List[]
  followers    User[]   @relation("UserFollows", fields: [followersIDs], references: [id])
  followersIDs String[] @db.ObjectId
  following    User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs String[] @db.ObjectId

  favoritePosts   Post[]   @relation("UserFavorites", fields: [favoritePostIDs], references: [id])
  favoritePostIDs String[] @db.ObjectId


  conversations     Conversation[] @relation("ConversationParticipants", fields: [conversationIDs], references: [id])
  conversationIDs   String[]       @db.ObjectId
  sentMessages      Message[]      @relation("MessageSender")
}
model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  link        String?
  description String?
  image       String
  createdAt   DateTime? @default(now())
  user        User?     @relation("PostAuthor", fields: [userId], references: [id])
  userId      String?   @db.ObjectId
  list        List?     @relation(fields: [listId], references: [id])
  listId      String?   @db.ObjectId
  isPrivate   Boolean?  @default(false)

  favoritedBy    User[]   @relation("UserFavorites", fields: [favoritedByIDs], references: [id])
  favoritedByIDs String[] @db.ObjectId
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  posts     Post[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  isPrivate Boolean? @default(false)
}


model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastMessageAt DateTime @default(now())
  

  participants   User[]   @relation("ConversationParticipants", fields: [participantIDs], references: [id])
  participantIDs String[] @db.ObjectId
  
  messages Message[]
  
  @@index([participantIDs])
  @@index([lastMessageAt])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  readAt    DateTime?
  

  sender   User   @relation("MessageSender", fields: [senderId], references: [id])
  senderId String @db.ObjectId
  

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  
  @@index([conversationId, createdAt])
  @@index([senderId])
}
